---
  AWSTemplateFormatVersion: 2010-09-09
  Description: "Online Trial Stack. Everything needed to deploy a single trial stack"
  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        - Label:
            default: Trial Environment Configuration
          Parameters:
            - TrialInstanceType
            - AdminUsername
            - AdminPassword
        - Label:
            default: Control Architecture Configuration
          Parameters:
            - ControlArchitectureName
        - Label:
            default: CI parameters
          Parameters:
            - BambooAMIID
  Parameters:
    AdminUsername:
      Type: String
      Description: The username of the admin user needed to make internal API calls
    AdminPassword:
      Type: String
      Description: The password of the admin use rneeded to make internal API calls
      NoEcho: True
    BambooAMIID:
      Type: String
      Description: An AMI produced by Bamboo to be used in the pipeline
      Default: BuildMe
    ControlArchitectureName:
      Description: The name of the Online Trial Control architecture cloudformation stack
      Type: String
      MinLength: 1
      Default: online-trial-control-test
    TrialInstanceType:
      Description: The type of EC2 instance to deploy the AMI to
      Type: String
      Default: t2.large
      MinLength: 1
      AllowedValues:
        - t2.large
        - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
  Mappings:
    ami:
      us-east-1:
        id: ami-08581ff35325de928
      eu-west-1:
        id: ami-05419cc6ee88ecc5e
  Conditions:
    UseBambooAmi: !Not [!Equals [!Ref BambooAMIID, BuildMe]]
  Resources:
    TrialRoute53DomainNameGenCustomResource:
      Type: Custom::DomainName
      Properties:
        ServiceToken:
          Fn::ImportValue: !Sub "${ControlArchitectureName}-DomainNameGenerator"
    TrialSubnetIdAllocatorCustomResource:
      Type: Custom::GetSubnetId
      Properties:
        ServiceToken:
          Fn::ImportValue: !Sub "${ControlArchitectureName}-SubnetAllocator"
    TrialEc2Instance:
      Type: AWS::EC2::Instance
      CreationPolicy:
        ResourceSignal:
          Timeout: PT45M
          Count: 1
      Metadata:
        AWS::CloudFormation::Init:
          config:
            files:
              '/tmp/generate-admin-pwd':
                content: !Sub |
                  #!/bin/bash
                  printf %s "${AdminPassword}" | iconv -t utf16le | openssl md4 | awk '{ print $2}'
                mode: '000550'
                owner: root
                group: root
      Properties:
        IamInstanceProfile: aws-opsworks-ec2-role
        ImageId: !If [UseBambooAmi, !Ref BambooAMIID, !FindInMap [ami, !Ref "AWS::Region", id]]
        InstanceType: !Ref TrialInstanceType
        KeyName: online-trial
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${ControlArchitectureName}-OpsWorksLayerSecurityGroups"
        SourceDestCheck: true
        SubnetId: !GetAtt TrialSubnetIdAllocatorCustomResource.SubnetId
        Tags:
          - Key: Account
            Value: !Ref AWS::AccountId
          - Key: Name
            Value: !Sub "${TrialRoute53DomainNameGenCustomResource.DomainName}.trial-ALFRESCO1"
          - Key: Allocated
            Value: false
          - Key: Stage
            Value:
              Fn::ImportValue: !Sub "${ControlArchitectureName}-OpsWorksDeploymentStage"
          - Key: ExpiryDate
            Value: !GetAtt TrialRoute53DomainNameGenCustomResource.ExpiryDate
        UserData:
          Fn::Base64:
            Fn::Join:
              - ""
              - - "#!/bin/bash\n"
                - "OPSWORKS_STACKID="
                - Fn::ImportValue: !Sub ${ControlArchitectureName}-OpsWorksStackId
                - "\nOPSWORKS_LAYERID="
                - Fn::ImportValue: !Sub ${ControlArchitectureName}-OpsWorksLayerId
                - "\n"
                - !Sub |
                  echo "Running cfn-init..."
                  /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource TrialEc2Instance --region ${AWS::Region}
                  echo "Configuring docker-compose.yml..."
                  ADMIN_PASSWORD=$(/tmp/generate-admin-pwd)
                  sed -i s,@@ADMIN_PASSWORD@@,$ADMIN_PASSWORD,g /opt/alfresco/docker-compose/docker-compose.yml
                  rm /tmp/generate-admin-pwd
                  sed -i s,@@EXTERNAL_PROTOCOL@@,https,g /opt/alfresco/docker-compose/docker-compose.yml
                  sed -i s,@@EXTERNAL_HOST@@,${TrialRoute53DomainNameGenCustomResource.DomainName}.trial.alfresco.com,g /opt/alfresco/docker-compose/docker-compose.yml
                  sed -i s,@@EXTERNAL_PORT@@,443,g /opt/alfresco/docker-compose/docker-compose.yml
                  echo "Registering instance with OpsWorks stack..."
                  aws opsworks register --stack-id $OPSWORKS_STACKID --infrastructure-class ec2 --region us-east-1 --override-hostname ${TrialRoute53DomainNameGenCustomResource.DomainName} --local --use-instance-profile
                  RESULT=$?
                  if [[ "$RESULT" == 0 ]]; then
                    echo "Starting docker-compose service..."
                    systemctl enable docker-compose
                    systemctl start docker-compose
                    echo "Waiting 5 minutes for docker-compose to start..."
                    sleep 5m
                    echo "Checking the repository is up..."
                    TIMEOUT=5
                    ITERATION=0
                    COMMAND="curl -s -o /dev/null -I -w %{http_code} localhost:8082/alfresco/"
                    while HTTPCODE=$($COMMAND); [[ $HTTPCODE != 200 ]];
                    do
                      if [[ $ITERATION -eq $TIMEOUT ]]; then
                        echo "Repository timeout after $TIMEOUT minutes"
                        RESULT=1
                        break
                      fi
                      echo "HTTPCODE=$HTTPCODE Waiting for repository to come up... $((ITERATION++))/$TIMEOUT"
                      sleep 1m
                    done
                    if [[ "$RESULT" == 0 ]]; then
                      echo "Checking Share is up..."
                      ITERATION=0
                      COMMAND="curl -s -o /dev/null -I -w %{http_code} localhost:8080/share/page/"
                      while HTTPCODE=$($COMMAND); [[ $HTTPCODE != 200 ]];
                      do
                        if [[ $ITERATION -eq $TIMEOUT ]]; then
                          echo "Share timeout after $TIMEOUT minutes"
                          RESULT=1
                          break
                        fi
                        echo "HTTPCODE=$HTTPCODE Waiting for Share to come up... $((ITERATION++))/$TIMEOUT"
                        sleep 1m
                      done
                      if [[ "$RESULT" == 0 ]]; then
                        echo "Checking the Digital Workspace is up..."
                        ITERATION=0
                        COMMAND="curl -s -o /dev/null -I -w %{http_code} localhost:3001"
                        while HTTPCODE=$($COMMAND); [[ $HTTPCODE != 200 ]];
                        do
                          if [[ $ITERATION -eq $TIMEOUT ]]; then
                            echo "Digital Workspace timeout after $TIMEOUT minutes"
                            RESULT=1
                            break
                          fi
                          echo "HTTPCODE=$HTTPCODE Waiting for the Digital Workspace to come up... $((ITERATION++))/$TIMEOUT"
                          sleep 1m
                        done
                        if [[ "$RESULT" == 0 ]]; then
                          # register instance with OpsWorks stack
                          echo "Assigning instance to OpsWorks layer..."
                          INSTANCE_ID=$(aws opsworks describe-instances --stack-id $OPSWORKS_STACKID --region us-east-1 --query 'Instances[?Hostname==`${TrialRoute53DomainNameGenCustomResource.DomainName}`].InstanceId' --output text)
                          if [[ "$INSTANCE_ID" != "" ]]; then
                            aws opsworks wait instance-registered --region us-east-1 --instance-id $INSTANCE_ID
                            RESULT=$?
                            if [[ "$RESULT" == 0 ]]; then
                              aws opsworks --region us-east-1 assign-instance --instance-id $INSTANCE_ID --layer-ids $OPSWORKS_LAYERID
                              RESULT=$?
                              if [[ "$RESULT" != 0 ]]; then
                                echo "Failed to assign instance to OpsWorks layer"
                              fi
                            else
                              echo "Failed to find registered instance in OpsWorks"
                            fi
                          else
                            RESULT=1
                            echo "Failed to find instace-id in OpsWorks stack"
                          fi
                        else
                          echo "Could not reach the Digital Workspace within $TIMEOUT minutes"
                        fi
                      else
                        echo "Could not reach Share within $TIMEOUT minutes"
                      fi
                    else
                      echo "Could not reach the repository within $TIMEOUT minutes"
                    fi
                  else
                    echo "Failed to register instance with OpsWorks"
                  fi
                  # tell CloudFormation we are done
                  echo "RESULT is $RESULT, sending signal to cloudformation"
                  /opt/aws/bin/cfn-signal -e $RESULT --stack ${AWS::StackName} --resource TrialEc2Instance --region ${AWS::Region}

    TrialOpsWorksRegisterHandlerCustomResource:
      Type: Custom::OpsWorksRegister
      DependsOn:
        - TrialEc2Instance
      Properties:
        ServiceToken:
          Fn::ImportValue: !Sub "${ControlArchitectureName}-OpsWorkRegister"
        Hostname: !GetAtt TrialRoute53DomainNameGenCustomResource.DomainName
    TrialOpsWorksInitInstanceCookbookCustomResource:
      Type: Custom::OpsWorksCookbookInstaller
      Properties:
        ServiceToken:
          Fn::ImportValue: !Sub "${ControlArchitectureName}-CookbookRunner"
        InstanceId: !GetAtt TrialOpsWorksRegisterHandlerCustomResource.InstanceId

  Outputs:
    Type:
      Description: The type of stack this is.
      Value: Trial
    InstanceId:
      Description: The id of the EC2 instance created by this stack
      Value: !Ref TrialEc2Instance
    PublicIp:
      Description: The Public IP of the EC2 instance. Handy for quick ssh'ing
      Value: !GetAtt TrialEc2Instance.PublicIp
    Url:
      Description: The Public Url that allows users access
      Value: !Sub "https://${TrialRoute53DomainNameGenCustomResource.DomainName}.trial.alfresco.com"
    Stage:
      Description: The environment this stack has been deployed to; test or prod
      Value:
        Fn::ImportValue: !Sub "${ControlArchitectureName}-OpsWorksDeploymentStage"